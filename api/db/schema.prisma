datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Movie {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  tmdbId         Int             @unique
  title          String
  releasedOn     DateTime
  photoPath      String
  overview       String?
  possibleMovies PossibleMovie[]
  correctPlays   Play[]          @relation("correctMovie")
  answeredPlays  Play[]          @relation("answeredMovie")

  @@index([id])
  @@index([tmdbId])
}

model Play {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  playerId        String
  player          Player          @relation(fields: [playerId], references: [id])
  correctMovie    Movie           @relation("correctMovie", fields: [correctMovieId], references: [id])
  correctMovieId  String
  possibleMovies  PossibleMovie[]
  answeredMovie   Movie?          @relation("answeredMovie", fields: [answeredMovieId], references: [id])
  answeredMovieId String?
  correctness     Boolean?

  @@index([id])
  @@index([playerId])
  @@index([correctMovieId])
  @@index([answeredMovieId])
  @@index([correctness])
}

model Player {
  id           String   @id @default(uuid())
  clerkId      String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  gravatarHash String?
  plays        Play[]

  @@index([id])
  @@index([name])
}

model PossibleMovie {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  play      Play     @relation(fields: [playId], references: [id])
  playId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   String

  @@index([id])
  @@index([playId])
  @@index([movieId])
  @@index([playId, movieId])
}
